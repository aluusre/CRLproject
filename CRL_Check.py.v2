#!/usr/bin/env python3

"""
export RELIC_API_KEY_ENC=$(echo -n "NRAK-xxxxx" | base64)
export RELIC_ACCOUNT_ID_ENC=$(echo -n "123456" | base64)
MTcyNTI4Mg==
OTE1MzUwNENFNjhCNDZDMzM4QTk1OUNDM0VCQzlDNDA3NDJFNjFBOTRCNjE2RUQyQ0Y2OEQ4MURFNUJBQTQxQw==

python3 CRL_Check.py \
  'https://raw.githubusercontent.com/aluusre/CRLproject/main/CRLURLs.json' \
  'us-west-1' \
  'https://insights-collector.newrelic.com/v1/accounts/$RELIC_ACCOUNT_ID_ENC/events'

CRL_Check.py
Usage:
    python3 CRL_Check.py <github_json_url> <region> <newrelic_event_api_url>
Example:
    python3 CRL_Check.py \
      "https://raw.githubusercontent.com/aluusre/CRLproject/main/CRLURLs.json" \
      "us-west-1" \
      "https://insights-collector.newrelic.com/v1/accounts/$RELIC_ACCOUNT_ID_ENC/events"
"""

import sys
import json
import os
import time
import requests
import base64
import warnings
warnings.filterwarnings("ignore", category=UserWarning)


RELIC_API_KEY_ENC="MTcyNTI4Mg=="
RELIC_ACCOUNT_ID_ENC="OTE1MzUwNENFNjhCNDZDMzM4QTk1OUNDM0VCQzlDNDA3NDJFNjFBOTRCNjE2RUQyQ0Y2OEQ4MURFNUJBQTQxQw=="
MAX_EXECUTION_TIME = 180

def main():
    if len(sys.argv) != 4:
        print("Usage: python3 CRL_Check.py <github_json_url> <region> <newrelic_event_api_url>")
        sys.exit(1)

    github_url = sys.argv[1]
    region = sys.argv[2]
    newrelic_url = sys.argv[3]

    # Environment variables for secrets (base64-encoded)
    relic_api_key = _decrypt_env_var("RELIC_API_KEY_ENC")
    relic_account_id = _decrypt_env_var("RELIC_ACCOUNT_ID_ENC")

    start_time = time.time()
    event_type = "CDNCheck"
    obj_type = "crl"

    # Fetch CRL URLs from GitHub JSON
    try:
        print(f"Fetching CRL list from {github_url}")
        resp = requests.get(github_url, timeout=15)
        resp.raise_for_status()
        data = resp.json()
        urls = data.get("urls", [])
    except Exception as e:
        print(f"Failed to fetch CRL list: {e}")
        sys.exit(1)

    if not urls:
        print("No URLs found in the provided JSON file.")
        sys.exit(1)

    results = []
    for url in urls:
        elapsed = int(time.time() - start_time)
        if elapsed >= MAX_EXECUTION_TIME:
            print("⏳ Execution time exceeded 3 minutes. Stopping early.")
            break

        result = _download_crl(url, event_type, obj_type)
        result["region"] = region  # include region info
        results.append(result)

    # Send results to New Relic
    if relic_api_key and relic_account_id:
        send_to_newrelic(newrelic_url, relic_api_key, results)
    else:
        print("Skipping New Relic submission — missing credentials.")

    # Print result summary
    print(json.dumps(results, indent=4))


# ==========================================================
# DOWNLOAD CRL FUNCTION
# ==========================================================

def _download_crl(url, event_type, obj_type):
    result = {
        "eventType": event_type,
        "type": obj_type,
        "url": url,
        "duration": 0,
        "success": False,
        "error": ""
    }

    start = time.time()
    try:
        response = requests.get(url, timeout=15)
        response.raise_for_status()
        result["success"] = True
    except Exception as e:
        result["error"] = str(e)
        result["success"] = False

    result["duration"] = int(time.time() - start)
    return result


# ==========================================================
# SEND RESULTS TO NEW RELIC
# ==========================================================

def send_to_newrelic(api_url, api_key, data):
    try:
        headers = {
            "Content-Type": "application/json",
            "Api-Key": api_key,
        }
        response = requests.post(api_url, headers=headers, data=json.dumps(data), timeout=10)
        response.raise_for_status()
        print(f"Sent {len(data)} results to New Relic successfully.")
    except Exception as e:
        print(f"Failed to send to New Relic: {e}")


# ==========================================================
# DECRYPT ENV VAR FUNCTION (Example)
# ==========================================================

def _decrypt_env_var(env_key):
    """Simple Base64 decode. Replace with KMS decryption if needed."""
    value = os.environ.get(env_key)
    if not value:
        return None
    try:
        return base64.b64decode(value).decode("utf-8")
    except Exception:
        return None


# ==========================================================
# ENTRY POINT
# ==========================================================

if __name__ == "__main__":
    main()






#Return Output ================================
"""
Example Output
[
    {
        "eventType": "CDNCheck",
        "type": "crl",
        "url": "http://crl.digicert.cn/DigiCertAssuredIDRootCA.crl",
        "duration": 231,
        "success": true,
        "error": "",
        "region": "us-west-1"
    },
    {
        "eventType": "CDNCheck",
        "type": "crl",
        "url": "http://crl4.digicert.com/DigiCertHighAssuranceEVRootCA.crl",
        "duration": 246,
        "success": true,
        "error": "",
        "region": "us-west-1"
    }
]
"""
